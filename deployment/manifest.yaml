apiVersion: apps/v1
kind: Deployment
metadata:
  name: usage-management-api
  namespace: usageq-ns
  labels:
    app: usage-management-api
spec:
  minReadySeconds: 60  # Pod가 Ready 상태로 간주되기 전 대기 시간
  replicas: 1          # replica를 1로 줄임
  progressDeadlineSeconds: 600  # 배포 데드라인 증가
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1        # 최대 1개의 추가 Pod 허용
      maxUnavailable: 0  # Pod 무중단 보장
  selector:
    matchLabels:
      app: usage-management-api
  template:
    metadata:
      labels:
        app: usage-management-api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8080"  # **server.port와 반드시 동일해야 함**
    spec:
      terminationGracePeriodSeconds: 90  # Pod 종료 대기 시간
      containers:
        - name: usage-management-api
          image: usageqcr.azurecr.io/telecom/usage-management-api:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
          startupProbe:  # 시작 시 probe 추가
            httpGet:
              path: /actuator/health
              port: 8080
            failureThreshold: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 90  # 더 길게 설정
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6       # 30초 (3 * 10초) 연속 실패 시 트래픽 차단
            successThreshold: 1        # 1회 성공하면 즉시 트래픽 수신
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 120  # 더 길게 설정
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          env:
            - name: TZ
              value: "Asia/Seoul"
            - name: JAVA_OPTS
              value: "-Xms256m -Xmx512m -XX:+UseG1GC"
          envFrom:
            - configMapRef:
                name: app-config
            - secretRef:
                name: app-secret
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 10"]
---
# 로드밸런서 생성
apiVersion: v1
kind: Service
metadata:
  name: usage-management-api
  labels:
    app: usage-management-api
spec:
  selector: # 타겟 Pod 설정
    app: usage-management-api
  ports:
    - port: 8080
      targetPort: 8080
  type: LoadBalancer
---
# 수평 자동 확장 설정
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: usage-management-api-hpa
  namespace: usageq-ns
  labels:
    app: usage-management-api
spec:
  scaleTargetRef: # 확장 대상 지정
    apiVersion: apps/v1
    kind: Deployment
    name: usage-management-api
  minReplicas: 1 # 최소 Pod 수
  maxReplicas: 10 # 최대 Pod 수
  metrics: # 확장 기준 설정
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70 # CPU 사용률 70% 초과시 확장
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80 # 메모리 사용률 80% 초과시 확장
---
# Usage Management Worker
apiVersion: apps/v1
kind: Deployment
metadata:
  name: usage-management-worker
  namespace: usageq-ns
  labels:
    app: usage-management-worker
spec:
  replicas: 1 # Pod 복제본 수
  selector:
    matchLabels:
      app: usage-management-worker
  template:
    metadata:
      labels:
        app: usage-management-worker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8080"  # **반드시 application.yml의 server.port와 동일해야 합니다**
    spec:
      containers:
        - name: usage-management-worker
          # 컨테이너 이미지 지정
          #          image: ${REGISTRY}/telecom/usage-management:${IMAGE_TAG}
          image: usageqcr.azurecr.io/telecom/usage-management-worker:latest
          imagePullPolicy: Always # 항상 최신 이미지 사용
          resources: # 리소스 제한 설정
            requests:
              cpu: "200m"
              memory: "384Mi"
            limits:
              cpu: "500m"
              memory: "768Mi"
          env:
            - name: TZ
              value: "Asia/Seoul"
            - name: JAVA_OPTS
              value: "-Xms256m -Xmx512m -XX:+UseG1GC"
          envFrom: # 환경변수 참조
            - configMapRef:
                name: app-config
            - secretRef:
                name: app-secret
---
# 로드밸런서 생성
apiVersion: v1
kind: Service
metadata:
  name: usage-management-worker
  labels:
    app: usage-management-worker
spec:
  selector: # 타겟 Pod 설정
    app: usage-management-worker
  ports:
    - port: 8080
      targetPort: 8080
  type: LoadBalancer
---
# 수평 자동 확장 설정
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: usage-management-worker-hpa
  namespace: usageq-ns
  labels:
    app: usage-management-worker
spec:
  scaleTargetRef: # 확장 대상 지정
    apiVersion: apps/v1
    kind: Deployment
    name: usage-management-worker
  minReplicas: 1 # 최소 Pod 수
  maxReplicas: 10 # 최대 Pod 수
  metrics: # 확장 기준 설정
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70 # CPU 사용률 70% 초과시 확장
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80 # 메모리 사용률 80% 초과시 확장
---
# Usage Query Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: usage-query
  namespace: usageq-ns
  labels:
    app: usage-query
spec:
  replicas: 1
  selector:
    matchLabels:
      app: usage-query
  template:
    metadata:
      labels:
        app: usage-query
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8080"  # **application.yml의 server.port와 반드시 동일해야 함**
    spec:
      containers:
        - name: usage-query
          #          image: ${REGISTRY}/telecom/usage-query:${IMAGE_TAG}
          image: usageqcr.azurecr.io/telecom/usage-query:latest
          imagePullPolicy: Always
          resources:
            requests:
              cpu: "200m"
              memory: "384Mi"
            limits:
              cpu: "500m"
              memory: "768Mi"
          env:
            - name: TZ
              value: "Asia/Seoul"
            - name: JAVA_OPTS
              value: "-Xms256m -Xmx512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+HeapDumpOnOutOfMemoryError"
          envFrom:
            - configMapRef:
                name: app-config
            - secretRef:
                name: app-secret
---
apiVersion: v1
kind: Service
metadata:
  name: usage-query
  labels:
    app: usage-query
spec:
  selector:
    app: usage-query
  ports:
    - port: 8080
      targetPort: 8080
  type: LoadBalancer
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: usage-query-hpa
  namespace: usageq-ns
  labels:
    app: usage-query
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: usage-query
  minReplicas: 1
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80