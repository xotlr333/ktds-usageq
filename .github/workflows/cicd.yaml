name: Usage Services CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  NAMESPACE: usageq-ns

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: |
          ./gradlew :usage-query-service:build
          ./gradlew :usage-management-service:build

      - name: Upload query service artifact
        uses: actions/upload-artifact@v3
        with:
          name: query-service
          path: usage-query-service/build/libs/*.jar

      - name: Upload management service artifact
        uses: actions/upload-artifact@v3
        with:
          name: management-service
          path: usage-management-service/build/libs/*.jar

  docker-build:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download query service artifact
        uses: actions/download-artifact@v3
        with:
          name: query-service
          path: query-service

      - name: Download management service artifact
        uses: actions/download-artifact@v3
        with:
          name: management-service
          path: management-service

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: usageqcr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push query service image
        run: |
          docker build -t ${{ env.REGISTRY }}/telecom/usage-query:${{ github.sha }} \
            -f deployment/Dockerfile-usage-query .
          docker tag ${{ env.REGISTRY }}/telecom/usage-query:${{ github.sha }} \
            ${{ env.REGISTRY }}/telecom/usage-query:latest
          docker push ${{ env.REGISTRY }}/telecom/usage-query:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/telecom/usage-query:latest

      - name: Build and push management service image
        run: |
          docker build -t ${{ env.REGISTRY }}/telecom/usage-management:${{ github.sha }} \
            -f deployment/Dockerfile-usage-management .
          docker tag ${{ env.REGISTRY }}/telecom/usage-management:${{ github.sha }} \
            ${{ env.REGISTRY }}/telecom/usage-management:latest
          docker push ${{ env.REGISTRY }}/telecom/usage-management:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/telecom/usage-management:latest

  deploy:
    needs: docker-build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create ConfigMap and Secrets
        run: |
          # Create ConfigMap
          kubectl create configmap app-config \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=SPRING_PROFILES_ACTIVE=${{ github.event.inputs.environment || 'dev' }} \
            --from-literal=SERVER_PORT=8080 \
            --dry-run=client -o yaml | kubectl apply -f -

          # Create Secrets
          kubectl create secret generic app-secret \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=DB_URL=${{ secrets.DB_URL }} \
            --from-literal=DB_USERNAME=${{ secrets.DB_USERNAME }} \
            --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --from-literal=REDIS_HOST=${{ secrets.REDIS_HOST }} \
            --from-literal=REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
            --from-literal=RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }} \
            --from-literal=RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }} \
            --from-literal=RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy applications
        run: |
          # Update manifest with current image tags
          cat deployment/manifest.yaml | \
            sed "s|image: .*usage-query.*|image: ${{ env.REGISTRY }}/telecom/usage-query:${{ github.sha }}|g" | \
            sed "s|image: .*usage-management.*|image: ${{ env.REGISTRY }}/telecom/usage-management:${{ github.sha }}|g" | \
            kubectl apply -f -

      - name: Verify deployment
        run: |
          echo "Waiting for services to be ready..."
          kubectl rollout status deployment/usage-query -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/usage-management -n ${{ env.NAMESPACE }} --timeout=300s
          
          echo "Service endpoints:"
          kubectl get services -n ${{ env.NAMESPACE }}

      - name: Check deployment status
        run: |
          QUERY_READY=$(kubectl get deploy usage-query -n ${{ env.NAMESPACE }} -o jsonpath='{.status.readyReplicas}')
          MANAGEMENT_READY=$(kubectl get deploy usage-management -n ${{ env.NAMESPACE }} -o jsonpath='{.status.readyReplicas}')
          
          if [ "$QUERY_READY" != "1" ] || [ "$MANAGEMENT_READY" != "1" ]; then
            echo "Deployment failed - not all replicas are ready"
            exit 1
          fi