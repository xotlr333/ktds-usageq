name: Usage Services CI/CD Pipeline

# 워크플로우 트리거 설정
on:
  # main 브랜치에 push 될 때 실행
  push:
    branches: [ main ]
  # main 브랜치로 PR이 생성될 때 실행
  pull_request:
    branches: [ main ]
  # 수동 실행 설정
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

# 환경 변수 설정
env:
  REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }} # ACR 주소
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }} # Azure 리소스 그룹
  CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }} # AKS 클러스터 이름
  NAMESPACE: usageq-ns # 네임스페이스

jobs:
  # 빌드 작업
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드 실행
      - name: Build with Gradle
        run: |
          ./gradlew :usage-management-api:clean :usage-management-api:build
          ./gradlew :usage-management-worker:clean :usage-management-worker:build
          ./gradlew :usage-query-service:clean :usage-query-service:build

      - name: Upload query service artifact
        uses: actions/upload-artifact@v3
        with:
          name: query-service
          path: usage-query-service/build/libs/*.jar

      - name: Upload management api artifact
        uses: actions/upload-artifact@v3
        with:
          name: management-api
          path: usage-management-api/build/libs/*.jar

      - name: Upload management worker artifact
        uses: actions/upload-artifact@v3
        with:
          name: management-worker
          path: usage-management-worker/build/libs/*.jar

  # Docker 이미지 빌드 작업
  docker-build:
    needs: build # 빌드 작업 완료 후 실행
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.generate_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate image tag
        id: generate_tag
        run: |
          TAG=$(date +'%Y%m%d%H%M%S')
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Download query service artifact
        uses: actions/download-artifact@v3
        with:
          name: query-service
          path: query-service

      - name: Download management api artifact
        uses: actions/download-artifact@v3
        with:
          name: management-api
          path: management-api

      - name: Download management worker artifact
        uses: actions/download-artifact@v3
        with:
          name: management-worker
          path: management-worker

      # Azure 로그인
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ACR 로그인
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # 서비스 이미지 빌드 및 푸시
      - name: Build and push query service image
        run: |
          docker build -t ${{ env.REGISTRY }}/telecom/usage-query:${{ steps.generate_tag.outputs.tag }} \
            -f deployment/Dockerfile-usage-query .
          docker tag ${{ env.REGISTRY }}/telecom/usage-query:${{ steps.generate_tag.outputs.tag }} \
            ${{ env.REGISTRY }}/telecom/usage-query:latest
          docker push ${{ env.REGISTRY }}/telecom/usage-query:${{ steps.generate_tag.outputs.tag }}
          docker push ${{ env.REGISTRY }}/telecom/usage-query:latest

      - name: Build and push management api image
        run: |
          docker build -t ${{ env.REGISTRY }}/telecom/usage-management-api:${{ steps.generate_tag.outputs.tag }} \
            -f deployment/Dockerfile-usage-management-api .
          docker tag ${{ env.REGISTRY }}/telecom/usage-management-api:${{ steps.generate_tag.outputs.tag }} \
            ${{ env.REGISTRY }}/telecom/usage-management-api:latest
          docker push ${{ env.REGISTRY }}/telecom/usage-management-api:${{ steps.generate_tag.outputs.tag }}
          docker push ${{ env.REGISTRY }}/telecom/usage-management-api:latest

      - name: Build and push management worker image
        run: |
          docker build -t ${{ env.REGISTRY }}/telecom/usage-management-worker:${{ steps.generate_tag.outputs.tag }} \
            -f deployment/Dockerfile-usage-management-worker .
          docker tag ${{ env.REGISTRY }}/telecom/usage-management-worker:${{ steps.generate_tag.outputs.tag }} \
            ${{ env.REGISTRY }}/telecom/usage-management-worker:latest
          docker push ${{ env.REGISTRY }}/telecom/usage-management-worker:${{ steps.generate_tag.outputs.tag }}
          docker push ${{ env.REGISTRY }}/telecom/usage-management-worker:latest

  # 배포 작업
  deploy:
    needs: docker-build # docekr-build 작업 완료 후 실행
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'prod' }}
    env:
      IMAGE_TAG: ${{ needs.docker-build.outputs.image_tag }}

    steps:
      - uses: actions/checkout@v4

      # Azure 로그인
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # AKS 설정
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      # 네임스페이스 생성
      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      # ConfigMap과 Secret 생성
      - name: Create ConfigMap and Secrets
        run: |
          # Create ConfigMap
          kubectl create configmap app-config \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=SPRING_PROFILES_ACTIVE=${{ github.event.inputs.environment || 'prod' }} \
            --from-literal=SERVER_PORT=8080 \
            --dry-run=client -o yaml | kubectl apply -f -

          # Create Secrets
          kubectl create secret generic app-secret \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=DB_URL=${{ secrets.DB_URL }} \
            --from-literal=DB_USERNAME=${{ secrets.DB_USERNAME }} \
            --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --from-literal=REDIS_HOST=${{ secrets.REDIS_HOST }} \
            --from-literal=REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
            --from-literal=RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }} \
            --from-literal=RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }} \
            --from-literal=RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

      # 매니페스트 생성 및 적용
      - name: Generate and apply Kubernetes manifests
        run: |
          # Set environment variables for manifest generation
          export IMAGE_TAG=${{ env.IMAGE_TAG }}
          export REGISTRY=${{ env.REGISTRY }}

          # Generate manifest using template and environment variables
          envsubst < deployment/manifest.yaml > generated-manifest.yaml

          # Print generated manifest for debugging
          echo "Generated Kubernetes manifest:"
          cat generated-manifest.yaml

          # Apply manifest
          kubectl apply -f generated-manifest.yaml

      # 배포 초기화 대기
      - name: Wait for deployments to initialize
        run: |
          echo "Waiting for deployments to initialize..."
          sleep 30
          kubectl get all -n ${{ env.NAMESPACE }}

      # 배포 검증
      - name: Verify deployment
        run: |
          echo "Verifying deployments and statefulsets..."
          
          # 배포 상태 검증 함수 - Deployment용
          verify_deployment() {
            local deploy_name=$1
            local max_attempts=10
            local attempt=1
            local timeout=60s
          
            while [ $attempt -le $max_attempts ]; do
              echo "Checking $deploy_name deployment (attempt $attempt/$max_attempts)..."
          
              if kubectl rollout status deployment/$deploy_name -n ${{ env.NAMESPACE }} --timeout=$timeout; then
                echo "✅ $deploy_name deployment is ready"
                return 0
              fi
          
              if [ $attempt -eq $max_attempts ]; then
                echo "❌ Failed to verify $deploy_name deployment"
                kubectl get deployment $deploy_name -n ${{ env.NAMESPACE }} -o wide
                kubectl get pods -n ${{ env.NAMESPACE }} -l app=$deploy_name -o wide
                return 1
              fi
          
              attempt=$((attempt + 1))
              sleep 10
            done
          }
          
          # 배포 상태 검증 함수 - StatefulSet용
          verify_statefulset() {
            local statefulset_name=$1
            local max_attempts=10
            local attempt=1
            local timeout=60s
          
            while [ $attempt -le $max_attempts ]; do
              echo "Checking $statefulset_name statefulset (attempt $attempt/$max_attempts)..."
          
              if kubectl rollout status statefulset/$statefulset_name -n ${{ env.NAMESPACE }} --timeout=$timeout; then
                echo "✅ $statefulset_name statefulset is ready"
                return 0
              fi
          
              if [ $attempt -eq $max_attempts ]; then
                echo "❌ Failed to verify $statefulset_name statefulset"
                kubectl get statefulset $statefulset_name -n ${{ env.NAMESPACE }} -o wide
                return 1
              fi
          
              attempt=$((attempt + 1))
              sleep 10
            done
          }
          
          # 병렬로 배포 상태 확인
          {
            verify_deployment "usage-management-api" 
          } & 
          {
            verify_statefulset "usage-management-worker"  # StatefulSet 검증 함수 사용
          } &
          {
            verify_deployment "usage-query"
          } &
          
          # 모든 백그라운드 작업이 완료될 때까지 대기
          wait
          
          # 모든 작업의 종료 코드 확인
          for job in $(jobs -p); do
            wait $job || exit 1
          done

      # ReplicaSet 정리
      - name: Clean up old ReplicaSets
        run: |
          echo "Cleaning up old ReplicaSets..."
          for app in usage-management-api usage-management-worker usage-query; do
            kubectl get rs -n ${{ env.NAMESPACE }} -l app=$app --sort-by=.metadata.creationTimestamp -o name | head -n -2 | xargs -r kubectl delete -n ${{ env.NAMESPACE }}
          done

      # 서비스 엔드포인트 출력
      - name: Print service endpoints
        run: |
          echo "Service endpoints:"
          kubectl get services -n ${{ env.NAMESPACE }}