name: Usage Services CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  NAMESPACE: usageq-ns

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: |
          ./gradlew :usage-query-service:build
          ./gradlew :usage-management-service:build

      - name: Upload query service artifact
        uses: actions/upload-artifact@v3
        with:
          name: query-service
          path: usage-query-service/build/libs/*.jar

      - name: Upload management service artifact
        uses: actions/upload-artifact@v3
        with:
          name: management-service
          path: usage-management-service/build/libs/*.jar

  docker-build:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download query service artifact
        uses: actions/download-artifact@v3
        with:
          name: query-service
          path: query-service

      - name: Download management service artifact
        uses: actions/download-artifact@v3
        with:
          name: management-service
          path: management-service

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: usageqcr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push query service image
        run: |
          docker build -t ${{ env.REGISTRY }}/usage-query-service:${{ github.sha }} \
            -f usage-query-service/Dockerfile .
          docker tag ${{ env.REGISTRY }}/usage-query-service:${{ github.sha }} ${{ env.REGISTRY }}/usage-query-service:latest
          docker push ${{ env.REGISTRY }}/usage-query-service:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/usage-query-service:latest

      - name: Build and push management service image
        run: |
          docker build -t ${{ env.REGISTRY }}/usage-management-service:${{ github.sha }} \
            -f usage-management-service/Dockerfile .
          docker tag ${{ env.REGISTRY }}/usage-management-service:${{ github.sha }} ${{ env.REGISTRY }}/usage-management-service:latest
          docker push ${{ env.REGISTRY }}/usage-management-service:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/usage-management-service:latest

  deploy:
    needs: docker-build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Secrets
        run: |
          kubectl create secret generic db-credentials \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=db-password=${{ secrets.DB_PASSWORD }} \
            --from-literal=rabbitmq-password=${{ secrets.RABBITMQ_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Usage Query Service
        run: |
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: usage-query
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              matchLabels:
                app: usage-query
            replicas: 2
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxSurge: 1
                maxUnavailable: 0
            template:
              metadata:
                labels:
                  app: usage-query
              spec:
                containers:
                - name: usage-query
                  image: ${{ env.REGISTRY }}/usage-query-service:${{ github.sha }}
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 8080
                  env:
                  - name: SPRING_PROFILES_ACTIVE
                    value: ${{ github.event.inputs.environment || 'dev' }}
                  - name: SPRING_DATASOURCE_URL
                    value: ${{ secrets.DB_URL }}
                  - name: SPRING_DATASOURCE_USERNAME
                    value: ${{ secrets.DB_USERNAME }}
                  - name: SPRING_DATASOURCE_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: db-credentials
                        key: db-password
                  resources:
                    requests:
                      memory: "1Gi"
                      cpu: "500m"
                    limits:
                      memory: "2Gi"
                      cpu: "1000m"
                  startupProbe:  # 시작 시 probe 추가
                    httpGet:
                      path: /actuator/health
                      port: 8080
                    failureThreshold: 30
                    periodSeconds: 10
                  livenessProbe:
                    httpGet:
                      path: /actuator/health
                      port: 8080
                    initialDelaySeconds: 180  # 더 길게 설정
                    periodSeconds: 30
                    timeoutSeconds: 5
                    failureThreshold: 3
                  readinessProbe:
                    httpGet:
                      path: /actuator/health
                      port: 8080
                    initialDelaySeconds: 150  # 더 길게 설정
                    periodSeconds: 30
                    timeoutSeconds: 5
                    failureThreshold: 3
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: usage-query
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              app: usage-query
            ports:
            - port: 80
              targetPort: 8080
            type: LoadBalancer
          EOF

      - name: Deploy Usage Management Service
        run: |
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: usage-management
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              matchLabels:
                app: usage-management
            replicas: 2
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxSurge: 1
                maxUnavailable: 0
            template:
              metadata:
                labels:
                  app: usage-management
              spec:
                containers:
                - name: usage-management
                  image: ${{ env.REGISTRY }}/usage-management-service:${{ github.sha }}
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 8080
                  env:
                  - name: SPRING_PROFILES_ACTIVE
                    value: ${{ github.event.inputs.environment || 'dev' }}
                  - name: SPRING_DATASOURCE_URL
                    value: ${{ secrets.DB_URL }}
                  - name: SPRING_DATASOURCE_USERNAME
                    value: ${{ secrets.DB_USERNAME }}
                  - name: SPRING_DATASOURCE_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: db-credentials
                        key: db-password
                  - name: SPRING_RABBITMQ_HOST
                    value: ${{ secrets.RABBITMQ_HOST }}
                  - name: RABBITMQ_PORT
                    value: "5672"
                  - name: SPRING_RABBITMQ_USERNAME
                    value: ${{ secrets.RABBITMQ_USERNAME }}
                  - name: SPRING_RABBITMQ_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: db-credentials
                        key: rabbitmq-password
                  resources:
                    requests:
                      memory: "1Gi"
                      cpu: "500m"
                    limits:
                      memory: "2Gi"
                      cpu: "1000m"
                  startupProbe:  # 시작 시 probe 추가
                    httpGet:
                      path: /actuator/health
                      port: 8080
                    failureThreshold: 30
                    periodSeconds: 10
                  livenessProbe:
                    httpGet:
                      path: /actuator/health
                      port: 8080
                    initialDelaySeconds: 180  # 더 길게 설정
                    periodSeconds: 30
                    timeoutSeconds: 5
                    failureThreshold: 3
                  readinessProbe:
                    httpGet:
                      path: /actuator/health
                      port: 8080
                    initialDelaySeconds: 150  # 더 길게 설정
                    periodSeconds: 30
                    timeoutSeconds: 5
                    failureThreshold: 3
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: usage-management
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              app: usage-management
            ports:
            - port: 80
              targetPort: 8080
            type: LoadBalancer
          EOF

      - name: Verify deployment
        run: |
          echo "Waiting for services to be ready..."
          kubectl rollout status deployment/usage-query -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/usage-management -n ${{ env.NAMESPACE }} --timeout=300s
          
          echo "Service endpoints:"
          kubectl get services -n ${{ env.NAMESPACE }}

      - name: Check deployment status
        run: |
          QUERY_READY=$(kubectl get deploy usage-query -n ${{ env.NAMESPACE }} -o jsonpath='{.status.readyReplicas}')
          MANAGEMENT_READY=$(kubectl get deploy usage-management -n ${{ env.NAMESPACE }} -o jsonpath='{.status.readyReplicas}')
          
          if [ "$QUERY_READY" != "2" ] || [ "$MANAGEMENT_READY" != "2" ]; then
            echo "Deployment failed - not all replicas are ready"
            exit 1
          fi